package main

import (
	"os"
	"log"
	"strings"
	"path/filepath"

	// JSII runtime and CDKTF core
	"github.com/aws/jsii-runtime-go"
	"github.com/hashicorp/terraform-cdk-go/cdktf"

	// Nomad provider and job resource (generated by cdktf)
	"cdk.tf/go/stack/generated/hashicorp/nomad/provider"
	"cdk.tf/go/stack/generated/hashicorp/nomad/job"
)

func register_job(stack cdktf.TerraformStack, id string, hcl string) {
	job.NewJob(stack, jsii.String(id), &job.JobConfig{
		Jobspec:             jsii.String(hcl),
		DeregisterOnDestroy: true,
		PurgeOnDestroy:      true,
	})
}

func main() {
	// --- CLI Flags ---
	jobsFlag := flag.String("jobs", "all", "Comma-separated list of job names (without .nomad.hcl) or 'all'")
	flag.Parse()

	// --- Stack Initialization ---
	app := cdktf.NewApp(nil)
	stack := cdktf.NewTerraformStack(app, jsii.String("nomad"))

	// --- Provider Configuration ---
	provider.NewNomadProvider(stack, jsii.String("nomad-provider"), &provider.NomadProviderConfig{
		Address: jsii.String("http://192.168.1.225:4646"),
	})

	// --- Job Registration ---
                  files, err := filepath.Glob("../../nomad-jobs/*.nomad.hcl")
	if err != nil {
		log.Fatalf("failed to glob job files: %v", err)
	}

	selected := map[string]bool{}
	if *jobsFlag != "all" {
		for _, name := range strings.Split(*jobsFlag, ",") {
			selected[strings.TrimSpace(name)] = true
		}
	}

	for _, f := range files {
		id := strings.TrimSuffix(filepath.Base(f), ".nomad.hcl")
		if *jobsFlag != "all" && !selected[id] {
			continue
		}
		raw, err := os.ReadFile(f)
		if err != nil {
			log.Printf("failed to read file %s: %v", f, err)
			continue
		}

		hcl := strings.ReplaceAll(string(raw), "${", "$${")
		register_job(stack, id, hcl)
	}
	app.Synth()
}
